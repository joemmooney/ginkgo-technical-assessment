{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/josephmooney/search-proteins-for-dna/src/components/Modal.js\";\n// frontend/src/components/Modal.js\nimport React, { Component } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from \"reactstrap\";\nexport default class CustomModal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDNAChange = e => {\n      const activeItem = { ...this.state.activeItem,\n        [e.target.name]: e.target.value.toUpperCase()\n      };\n      this.setState({\n        activeItem\n      });\n    };\n\n    this.handleRerunChange = e => {\n      const activeItem = { ...this.state.activeItem,\n        [e.target.name]: e.target.checked\n      };\n      this.setState({\n        activeItem\n      });\n    };\n\n    this.state = {\n      activeItem: this.props.activeItem\n    };\n  }\n\n  render() {\n    const {\n      toggle,\n      onSave\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: true,\n      toggle: toggle,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        toggle: toggle,\n        children: \" Match New Sequence \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"dnasequence\",\n              children: \"DNA Sequence\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"dnasequence\",\n              value: this.state.activeItem.dnasequence,\n              onChange: this.handleDNAChange,\n              placeholder: \"Enter DNA Sequence\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            check: true,\n            children: /*#__PURE__*/_jsxDEV(Label, {\n              for: \"forcererun\",\n              children: [/*#__PURE__*/_jsxDEV(Input, {\n                type: \"checkbox\",\n                name: \"forcererun\",\n                checked: this.state.activeItem.forcererun,\n                onChange: this.handleRerunChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 21\n              }, this), \"Force Rerun\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"success\",\n          onClick: () => onSave(this.state.activeItem),\n          children: \"Find Matching Protein\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/josephmooney/search-proteins-for-dna/src/components/Modal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Input","Label","CustomModal","constructor","props","handleDNAChange","e","activeItem","state","target","name","value","toUpperCase","setState","handleRerunChange","checked","render","toggle","onSave","dnasequence","forcererun"],"mappings":"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","sourcesContent":["// frontend/src/components/Modal.js\n\nimport React, { Component } from \"react\";\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\n\nexport default class CustomModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeItem: this.props.activeItem\n        };\n    }\n    handleDNAChange = e => {\n        const activeItem = { ...this.state.activeItem, [e.target.name]: e.target.value.toUpperCase() };\n        this.setState({ activeItem });\n    };\n    handleRerunChange = e => {\n        const activeItem = { ...this.state.activeItem, [e.target.name]: e.target.checked };\n        this.setState({ activeItem });\n    };\n    render() {\n        const { toggle, onSave } = this.props;\n        return (\n            <Modal isOpen={true} toggle={toggle}>\n            <ModalHeader toggle={toggle}> Match New Sequence </ModalHeader>\n            <ModalBody>\n                <Form>\n                <FormGroup>\n                    <Label for=\"dnasequence\">DNA Sequence</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"dnasequence\"\n                        value={this.state.activeItem.dnasequence}\n                        onChange={this.handleDNAChange}\n                        placeholder=\"Enter DNA Sequence\"\n                    />\n                </FormGroup>\n                <FormGroup check>\n                    <Label for=\"forcererun\">\n                    <Input\n                        type=\"checkbox\"\n                        name=\"forcererun\"\n                        checked={this.state.activeItem.forcererun}\n                        onChange={this.handleRerunChange}\n                    />\n                    Force Rerun\n                    </Label>\n                </FormGroup>\n                </Form>\n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\n                Find Matching Protein\n                </Button>\n            </ModalFooter>\n            </Modal>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}